<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <artifactId>java21-demo-maven</artifactId>
        <groupId>com.fu</groupId>
        <version>1</version>
    </parent>

    <artifactId>spring-boot3-demo</artifactId>

    <dependencies>
        <!--
        lombok 在未来的 javac 版本中，可能会需要显式指定注解处理器，否则注解处理功能将被禁用。如：像下面这样设置
        千万不要在 maven-compiler-plugin 插件里面显式的指定编码为UTF-8，就像这样 <encoding>UTF-8</encoding>，这样会导致 IDEA 编译的时候控制台乱码
         <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
         -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
            <optional>true</optional>
        </dependency>
        <!-- 内容协商支持返回xml格式 -->
        <dependency>
            <groupId>com.fasterxml.jackson.dataformat</groupId>
            <artifactId>jackson-dataformat-xml</artifactId>
        </dependency>
        <!-- web -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!-- 测试类 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- 配置注释器 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>
        <!-- 参数校验 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <!-- mysql 升级到 【MySQL Connector/J 9.0.0 或更高版本：此版本将允许虚拟线程与数据库交互达到最佳性能。】 -->
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <scope>runtime</scope>
        </dependency>
        <!-- MyBatis-Plus -->
        <dependency>
            <groupId>com.baomidou</groupId>
            <!-- Spring Boot2及以下用的是 mybatis-plus-boot-starter，Spring Boot3开始用 mybatis-plus-spring-boot3-starter -->
            <artifactId>mybatis-plus-spring-boot3-starter</artifactId>
            <version>${mybatis-plus-spring-boot3-starter.version}</version>
        </dependency>
        <!-- cache 本地缓存【不引入 caffeine 默认用java自带的 ConcurrentHashMap 】 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-cache</artifactId>
        </dependency>
        <!-- caffeine 本地缓存 -->
        <dependency>
            <groupId>com.github.ben-manes.caffeine</groupId>
            <artifactId>caffeine</artifactId>
        </dependency>
        <!-- Redis -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        <!-- 集成Swagger -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>${springdoc-openapi-starter-webmvc-ui.version}</version>
        </dependency>
        <!-- RestClient 和 RestTemplate 使用 Apache httpclient5 连接池-->
        <dependency>
            <groupId>org.apache.httpcomponents.client5</groupId>
            <artifactId>httpclient5</artifactId>
        </dependency>
        <!-- mybaits 需要这个依赖才能打 native 包，而且要注意这个是 GraalVM 的版本，不是jdk的版本！！！【直接打开 GraalVM 的安装路径查看 release 文件里的 GRAALVM_VERSION】 -->
        <dependency>
            <groupId>org.graalvm.sdk</groupId>
            <artifactId>graal-sdk</artifactId>
            <version>${GRAALVM_VERSION}</version>
            <scope>provided</scope>
        </dependency>
    </dependencies>

    <build>
        <finalName>${project.artifactId}-${project.version}-${maven.build.timestamp}</finalName>
        <plugins>
            <!-- AOT Graalvm native maven 插件 -->
            <plugin>
                <groupId>org.graalvm.buildtools</groupId>
                <artifactId>native-maven-plugin</artifactId>
                <version>${native.maven.plugin.version}</version>
                <configuration>
                    <!-- 快速构建【CPU和内存疯涨，这时候电脑会卡顿】或者将 GRAALVM_QUICK_BUILD 环境变量设置为 true -->
                    <quickBuild>true</quickBuild>
                    <skipNativeTests>true</skipNativeTests>
                    <debug>false</debug>
                    <verbose>false</verbose>
                    <buildArgs combine.children="append">
                        <buildArg>--enable-url-protocols=http</buildArg>
                        <buildArg>--features=com.fu.springboot3demo.config.mybatisplus.LambdaRegistrationFeature</buildArg>
                    </buildArgs>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
            <!-- Spring Boot Maven 插件【前面设置了版本就会替换掉 spring-boot-maven-plugin 里默认的版本号】 -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <includeSystemScope>true</includeSystemScope>
                    <addResources>true</addResources>
                    <excludes>
                        <!--不打包lombok，因为lombok只在编译时使用，编译后就没用了-->
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                        <exclude>
                            <groupId>org.springframework.boot</groupId>
                            <artifactId>spring-boot-starter-test</artifactId>
                        </exclude>
                        <!-- 排除 log4j -->
                        <exclude>
                            <groupId>org.apache.logging.log4j</groupId>
                            <artifactId>log4j-api</artifactId>
                        </exclude>
                        <exclude>
                            <groupId>org.apache.logging.log4j</groupId>
                            <artifactId>log4j-to-slf4j</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
            <!-- 用 Dockerfile 把 Spring Boot 项目打包成 docker image 的 maven 插件【需要先clean 和 package 把 Spring Boot 项目打包成jar包】 -->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>dockerfile-maven-plugin</artifactId>
                <version>${dockerfile-maven-plugin.version}</version>
                <configuration>
                    <dockerfile>./Dockerfile</dockerfile>
                    <!-- 不缓存 -->
                    <noCache>true</noCache>
                    <!-- image 版本号 -->
                    <tag>${project.version}</tag>
                    <!-- 传入 Dockerfile 的构建参数 -->
                    <buildArgs>
                        <JAR_NAME>${project.build.finalName}</JAR_NAME>
                        <!-- 通用 JRE 镜像 jre-${java.version}-slim-glibc 【推荐bellsoft 的 jre docker image，因为打出来的images比较小】 -->
                        <JDK>bellsoft/liberica-runtime-container:jre-${JAVA_VERSION}-slim-glibc</JDK>
                    </buildArgs>
                    <!-- docker 远程仓库地址【使用dockerfile:push的时候会使用】 -->
                    <repository>localhost:5000/${project.artifactId}</repository>
                    <!-- docker 远程仓库用户名 -->
                    <username>username</username>
                    <!-- docker 远程仓库密码 -->
                    <password>password</password>
                </configuration>
            </plugin>
        </plugins>
        <resources>
            <!-- 排除打包文件 -->
            <resource>
                <directory>src/main/resources</directory>
                <excludes>
                    <exclude>application*.yml</exclude>
                    <exclude>application*.properties</exclude>
                </excludes>
            </resource>
            <!-- 打包需要的文件 -->
            <resource>
                <directory>src/main/resources</directory>
                <!-- 解决yml配置@spring.profiles.active@时编译后没有生成对应环境的问题 -->
                <filtering>true</filtering>
                <!-- 只打包具体的环境，不打包其它环境的配置文件 -->
                <includes>
                    <include>**/*.xml</include>
                    <include>application.yml</include>
                    <include>application-${spring.profiles.active}*.yml</include>
                    <include>application.properties</include>
                    <include>application-${spring.profiles.active}*.properties</include>
                </includes>
            </resource>
        </resources>
    </build>

</project>